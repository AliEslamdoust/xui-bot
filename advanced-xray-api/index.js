const{keys:a}=Object;var b=require('express'),c=b(),d=require('axios'),e=require('fs'),f=require('js-yaml'),g=require('sqlite3').verbose(),h=require('bcrypt'),i=require('body-parser'),j=require('path'),p=j.join('/root/telegram-api/db/config.yaml'),r=j.join(k.db_json),s=j.join(k.backup_file),u=j.join(k.xui_database);c.use(i.json());c.use(b.json());let k,l,m;let n={};let o=0;aJ();var q=j.join(k.log_file);aI();var t=k.port;var v=new g.Database(u, B=>{B?aP(B,'ERROR'):aP('connected to X-UI database','INFO')});aC();c.get('/api/startSync/',(C,_b)=>{let _c=aN(C.headers.accesscode);!_c&&_b.json({ok:!1,msg:'false access code'});try{var D=C.query.timer;x(D*1000);_b.json({ok:!0,msg:'interval started'})}catch(_a){aP(_a,'ERROR');_b.json({ok:!1,msg:_a})}});c.get('/api/stopSync',(_A,_B)=>{let _C=aN(_A.headers.accesscode);!_C&&_B.json({ok:!1,msg:'false access code'});y();_B.json({ok:!0,msg:'interval stopped'})});c.post('/api/updateClient',async (E,aQ)=>{let aR=aN(E.headers.accesscode);!aR&&aQ.json({ok:!1,msg:'false access code'});try{aQ.json(await aE(E.body.client))}catch(aS){aP(aS,'ERROR');aQ.json({ok:!1,msg:aS})}});c.post('/api/removeClient',async (aT,aU)=>{let aV=aN(aT.headers.accesscode);!aV&&aU.json({ok:!1,msg:'false access code'});try{let aW=aT.body.client;aU.json(await aF(aW.id,aW.inbound))}catch(aX){aP(aX,'ERROR');aU.json({ok:!1,msg:aX})}});c.post('/api/addClient',async (aY,aZ)=>{let bA=aN(aY.headers.accesscode);!bA&&aZ.json({ok:!1,msg:'false access code'});try{aZ.json(await aG(aY.body.client))}catch(bB){aP(bB,'ERROR');aZ.json({ok:!1,msg:bB})}});c.post('/api/changeClientUsage',async (bC,bD)=>{let bE=aN(bC.headers.accesscode);!bE&&bD.json({ok:!1,msg:'false access code'});try{bD.json(await aD(bC.body.client))}catch(bF){aP(bF,'ERROR');bD.json({ok:!1,msg:bF})}});c.get('/api/getClient/:subId',async (bG,bH)=>{let bI=aN(bG.headers.accesscode);!bI&&bH.json({ok:!1,msg:'false access code'});try{let bJ=await A(bG.params.subId);bH.json({ok:!0,data:bJ})}catch(bK){bH.json({ok:!1,data:null})}});c.get('/api/getFinishedClient',(bL,bM)=>{let bN=aN(bL.headers.accesscode);!bN&&bM.json({ok:!1,msg:'false access code'});try{let bO={outdated:l.outdated_clients,overused:l.overused_clients};bM.json({ok:!0,data:bO})}catch(bP){bM.json({ok:!1,data:null})}});c.get('/api/stopClientSyncing/:subId',(bQ,bR)=>{let bS=aN(bQ.headers.accesscode);!bS&&bR.json({ok:!1,msg:'false access code'});try{let bT=bQ.params.subId;let bU=Date.now();l.overused_clients[bT]=bU;aK();bR.json({ok:!0,msg:'clients\' syncing stopped'})}catch(bV){bR.json({ok:!1,msg:'error in stopping clients\' syncing'})}});c.get('/api/syncClient/:subId',(bW,bX)=>{let bY=aN(bW.headers.accesscode);!bY&&bX.json({ok:!1,msg:'false access code'});try{let bZ=bW.params.subId;delete l.outdated_clients[bZ];delete l.overused_clients[bZ];aK();bX.json({ok:!0,msg:'clients\' syncing started'})}catch(cA){bX.json({ok:!1,msg:'error in starting clients\' syncing'})}});c.get('/api/reload',async (cB,cC)=>{let cD=aN(cB.headers.accesscode);!cD&&cC.json({ok:!1,msg:'false access code'});try{aJ();await aC();aH().then(aI());cC.json({ok:!0,msg:'reloaded successfully'})}catch(cE){cC.json({ok:!1,msg:'internal error in reloading configs'})}});c.post('/api/updatePassword',async (cF,cG)=>{let cH=aN(cF.headers.accesscode);!cH&&cG.json({ok:!1,msg:'false access code'});try{var _d=cF.headers.password;k.accesscode=await aM(_d);aL();cG.json({ok:!0,msg:'reloaded successfully'})}catch(cI){cG.json({ok:!1,msg:'internal error in reloading configs'})}});c.get('/api/SIDbyID/:id',async (cJ,cK)=>{let cL=aN(cJ.headers.accesscode);!cL&&cK.json({ok:!1,msg:'false access code'});try{let cM=await aA(cJ.params.id);cK.json({ok:!0,data:cM})}catch(cN){cK.json({ok:!1,data:null})}});c.get('/api/SIDbyEmail/:email',async (cO,cP)=>{let cQ=aN(cO.headers.accesscode);!cQ&&cP.json({ok:!1,msg:'false access code'});try{let cR=await aB(cO.params.email);cP.json({ok:!0,data:cR})}catch(cS){cP.json({ok:!1,data:null})}});c.get('/api/restartXray',async (cT,cU)=>{let cV=aN(cT.headers.accesscode);!cV&&cU.json({ok:!1,msg:'false access code'});try{await w();cU.json({ok:!0,msg:'xray core restarted successfully'})}catch(cW){cU.json({ok:!1,msg:cW})}});async function w(){await d({method:'post',maxBodyLength:Infinity,url:`${k.xui.address}:${k.xui.port}/server/restartXrayService`,headers:{Accept:'application/json','Conetnt-Type':'application/json',Cookie:l.cookie}}).then(cX=>{if(cX.data.success)aP('xray-core restarted','INFO');else{aH();aP(cX.data.msg,'ERROR');throw Error(cX.data.msg)}}).catch(cY=>{aP(cY,'ERROR');throw Error(cY)})}function x(cZ){clearInterval(m);z();m=setInterval(()=>z(),cZ)}function y(){clearInterval(m)}async function z(){try{o>=k.reload_delay&&(aC(),o=0);let dA=_();for(let dB of dA){let dC=await A(dB);let dD=!1;for(const dG of a(l.overused_clients))dB==dF&&(dD=!0);for(const dI of a(l.outdated_clients))dB==dH&&(dD=!0);if(dD)continue;let dE=Date.now();let _D=((dC.totalGB-(dC.up+dC.down))/1024**3).toFixed(2)+'GB';if(dC.totalGB==0)_D='unlimited';else if(dC.totalGB<=dC.up+dC.down)for(let dJ in dC.email){let dK={...dC};dK.email=dC.email[dJ];dK.id=dC.id[dJ];dK.inbound=dC.inbound[dJ];dK.enable=!1;let dL=await aE(dK);dL.ok&&(console.log(dB,'was disabled due to overusing traffic'),l.overused_clients[dB]=dE,aK())}(dC.expiryTime!=0&&dC.expiryTime<=dE)&&(l.outdated_clients[dB]=dC.expiryTime,aK());console.log(dB,'has',_D,'left')}}catch(dM){aP(dM,'ERROR')}}function _(){let dN=Array();for(let dO in a(n)){let dP=n[a(n)[dO]];for(let dQ in dP){let dR=dP[dQ].subId;let dS=!1;for(let dT of dN)dT==dR&&(dS=!0);!dS&&dN.push(dR)}}return dN}async function A(dU){await aC();let dV={id:[],security:'auto',email:[],limitIp:0,totalGB:0,expiryTime:0,enable:!0,tgId:'',subId:dU,reset:0,down:0,up:0,inbound:[]};for(let dW in a(n)){let dX=n[a(n)[dW]];for(let dY of dX)if(dY.subId==dU){dV.id.push(dY.id);dV.email.push(dY.email);dV.inbound.push(parseInt(a(n)[dW]));dW==0&&(dV.limitIp=dY.limitIp,dV.totalGB=dY.totalGB,dV.expiryTime=dY.expiryTime,dV.enable=dY.enable,dV.tgId=dY.tgId,dV.reset=dY.reset)}}for(let email of dV.email)try{await new Promise((dZ,eA)=>v.get('SELECT up,down FROM client_traffics WHERE email = ?',[email],(eB,eC)=>{if(eB){aP(eB,'ERROR');eA(eB)}else eC?(dV.up+=eC.up,dV.down+=eC.down,dZ('success')):(aP('client doesn\'t exist','WARN'),eA('client doesn\'t exist'))}))}catch(eD){aP(eD,'ERROR')}return dV}async function aA(eE){await aC();let eF;for(let eG in a(n)){let eH=n[a(n)[eG]];for(let eI of eH)eI.id==eE&&(eF=eI.subId)}return eF}async function aB(eJ){await aC();let eK;for(let eL in a(n)){let eM=n[a(n)[eL]];for(let eN of eM)eN.email==eJ&&(eK=eN.subId)}return eK}async function aC(){var eO=k.xui.inbounds;try{for(let eP of eO){n[eP]=await new Promise((eQ,eR)=>v.get('SELECT settings FROM inbounds WHERE id = ?',[eP],(eS,eT)=>eS?(aP(eS,'WARN'),eR(eS)):(eQ(JSON.parse(eT.settings).clients))))}}catch(eU){aP(eU,'ERROR')}}async function aD(eV){let eW;let{email:eX,usage:eY}=eV;try{for(let eZ in eX){let fA=eZ==0?eY:0;await new Promise((fB,fC)=>v.run('UPDATE client_traffics SET up = 0, down = ? WHERE email = ?',[fA,eX[eZ]],fD=>{fD?(eW={ok:!1,msg:'an unexpected error has occured'},fC(fD),aP(fD,'WARN')):(fB('success'))}))}eW={ok:!0,msg:'client usage has updated'}}catch(fE){aP(fE,'ERROR');eW={ok:!1,msg:'an unexpected error has occured'}}finally{return eW}}async function aE(fF){let fG;try{let{email:fH,id:fI,inbound:fJ,enable:fK,totalGB:_e,limitIp:F,subId:G,expiryTime:H,tgId:I}=fF;fG=await d({method:'post',maxBodyLength:Infinity,url:`${k.xui.address}:${k.xui.port}/panel/api/inbounds/updateClient/${fI}`,headers:{Accept:'application/json','Content-Type':'application/json',Cookie:l.cookie},data:JSON.stringify({id:parseInt(fJ),settings:JSON.stringify({clients:[{email:fH,enable:fK,expiryTime:H,id:fI,limitIp:F,subId:G,tgId:I,totalGB:_e}]})})}).then(fL=>{if(!fL.data.success){setTimeout(()=>aH(),2000);aP(`Error in changing clients' stat: ${fH} - id: ${fI}: ${fL.data.msg}`,'WARN');return{ok:!1,msg:`Error in changing clients' stat: ${fH} - id: ${fI}`}}console.log(`Updated clients' stat: ${fH} - id: ${fI}`);return{ok:!0,msg:`updated ${fH} status`}}).catch(fM=>aP(fM,'WARN'))}catch(fN){aP(fN,'WARN');fG={ok:!0,msg:fN}}finally{return fG}}async function aF(fO,fP){let fQ;try{var fR={method:'post',maxBodyLength:Infinity,url:`${k.xui.address}:${k.xui.port}/panel/api/inbounds/${fP}/delClient/${fO}`,headers:{Accept:'application/json','Conetnt-Type':'application/json',Cookie:l.cookie}};await d(fR).then(fS=>{fS.data.success?(aP(`client deleted from x-ui panel: ${fO}`,'INFO'),fQ={ok:!0,msg:'client deleted from x-ui panel'}):(aH(),aP(`error in removing client: id - ${fO}, msg: ${fS.data.msg}`,'WARN'),fQ={ok:!1,msg:'an unexpected error has occured'})}).catch(fT=>{aP(fT,'WARN');fQ={ok:!1,msg:'an unexpected error has occured'}})}catch(fU){aP(fU,'ERROR');fQ={ok:!1,msg:'an unexpected error has occured'}}finally{return fQ}}async function aG(fV){let fW;try{var fX={id:parseInt(fV.inbound),settings:JSON.stringify({clients:[{id:fV.id,email:fV.email,limitIp:fV.limitIp,totalGB:fV.totalGB,expiryTime:fV.expiryTime,enable:fV.enable,tgId:fV.tgId,subId:fV.subId}]})},fY={method:'post',maxBodyLength:Infinity,url:`${k.xui.address}:${k.xui.port}/panel/api/inbounds/addClient`,headers:{Accept:'application/json','Conetnt-Type':'application/json',Cookie:l.cookie},data:fX};await d(fY).then(fZ=>{fZ.data.success?(aP('new client added to x-ui panel: '+fV.email,'INFO'),fW={ok:!0,msg:'new client added to x-ui panel'}):(aH(),aP(fZ.data.msg,'WARN'),fW={ok:!1,msg:'an unexpected error has occured'})}).catch(gA=>{aP(gA,'WARN');fW={ok:!1,msg:'an unexpected error has occured'}})}catch(gB){aP(gB,'ERROR');fW={ok:!1,msg:'an unexpected error has occured'}}finally{return fW}}async function aH(){try{await d({method:'post',maxBodyLength:Infinity,url:`${k.xui.address}:${k.xui.port}/login`,headers:{'Content-Type':'application/json'},data:JSON.stringify({username:k.xui.username,password:k.xui.password})}).then(gC=>{if(gC.data.success){l.cookie=gC.headers['set-cookie'][1];aK();aP('received new cookie and stored it in json database','INFO')}else{setTimeout(()=>{aH();aK()},2000);aP('Error in recieving cookie, something went wrong','WARN')}}).catch(gD=>aP(gD,'ERROR'))}catch(gE){aP(gE,'ERROR')}}function aI(){try{l=JSON.parse(e.readFileSync(r));setInterval(()=>o++,1000);console.log('database was loaded successfully')}catch(gF){aP(gF,'ERROR')}}function aJ(){try{k=f.load(e.readFileSync(p));setInterval(()=>o++,1000);console.log('yamlData was loaded successfully')}catch(gG){console.log('couldn\'t load config.yaml! please re-run the program')}}function aK(gH){try{let gI;gH?gI=s:gI=r;e.writeFile(gI,JSON.stringify(l),gJ=>{gJ&&(aK(!0),aP(gJ,'ERROR'))})}catch(gK){aP(gK,'ERROR')}}function aL(){let gL;try{e.writeFile(p,f.dump(k),gM=>{gM?(aP(gM,'ERROR'),gL={ok:!1,msg:'an unexpected error has occured'}):(gL={ok:!0,msg:'config file updated'})});aJ()}catch(gN){aP(gN,'ERROR');gL={ok:!1,msg:'an unexpected error has occured'}}finally{return gL}}async function aM(gO){return await h.hash(gO,10)}async function aN(gP){try{return await h.compare(gP,k.accesscode)}catch(gQ){aP(gQ,'ERROR');return!1}}function aO(){let gR=new Date();let gS=gR.getFullYear();let gT=`${gR.getMonth()+1}`.padStart(2,'0');let gU=`${gR.getDay()}`.padStart(2,'0');let _E=`${gR.getHours()}`.padStart(2,'0');let _f=`${gR.getMinutes()}`.padStart(2,'0');let _g=`${gR.getSeconds()}`.padStart(2,'0');return`${gS}-${gT}-${gU} ${_E}:${_f}:${_g}`}function aP(gV,gW){try{e.appendFile(q,`[${aO()}] ${gW}: ${gV}\n`,gX=>{gX?aP(gX,'ERROR'):console.log(gV,'See log.txt for full info')})}catch(gY){console.log(gY);aP(gY,'ERROR')}}c.listen(t,console.log('server started on port',t));
